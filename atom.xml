<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[heyandev github Blog]]></title>
  <link href="http://heyandev.github.io/atom.xml" rel="self"/>
  <link href="http://heyandev.github.io/"/>
  <updated>2015-01-30T09:38:42+08:00</updated>
  <id>http://heyandev.github.io/</id>
  <author>
    <name><![CDATA[heyan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[用cocoapods做ios程序的依赖管理]]></title>
    <link href="http://heyandev.github.io/blog/2015/01/29/yong-cocoapodszuo-ioscheng-xu-de-yi-lai-guan-li/"/>
    <updated>2015-01-29T17:40:30+08:00</updated>
    <id>http://heyandev.github.io/blog/2015/01/29/yong-cocoapodszuo-ioscheng-xu-de-yi-lai-guan-li</id>
    <content type="html"><![CDATA[<p>CocoaPods简介</p>

<p>每种语言发展到一个阶段，就会出现相应的依赖管理工具，例如Java语言的Maven，nodejs的npm。随着iOS开发者的增多，业界也出现了为iOS程序提供依赖管理的工具，它的名字叫做：<a href="http://cocoapods.org">CocoaPods</a>。</p>

<!--more-->


<p>CocoaPods<a href="https://github.com/CocoaPods/CocoaPods">项目的源码</a>在Github上管理。该项目开始于2011年8月12日，经过多年发展，现在已经成为iOS开发事实上的依赖管理标准工具。开发iOS项目不可避免地要使用第三方开源库，CocoaPods的出现使得我们可以节省设置和更新第三方开源库的时间。</p>

<p>在没有使用CocoaPods以前，我需要:</p>

<p>把这些第三方开源库的源代码文件复制到项目中，或者设置成git的submodule。
对于这些开源库通常需要依赖系统的一些framework，我需要手工地将这些framework一一增加到项目依赖中，比如通常情况下，一个网络库就需要增加以下framework: CFNetwork, SystemConfiguration, MobileCoreServices, CoreGraphics, zlib。
对于某些开源库，我还需要设置-licucore或者 -fno-objc-arc等编译参数
管理这些依赖包的更新。
这些体力活虽然简单，但毫无技术含量并且浪费时间。在使用CocoaPods之后，我只需要将用到的第三方开源库放到一个名为Podfile的文件中，然后执行pod install。CocoaPods就会自动将这些第三方开源库的源码下载下来，并且为我的工程设置好相应的系统依赖和编译参数。</p>

<p>CocoaPods的安装和使用介绍</p>

<p>安装</p>

<p>安装方式异常简单, Mac下都自带ruby，使用ruby的gem命令即可下载安装：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo gem install cocoapods
</span><span class='line'>$ pod setup</span></code></pre></td></tr></table></div></figure>


<p>如果你的gem太老，可能也会有问题，可以尝试用如下命令升级gem:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo gem update --system</span></code></pre></td></tr></table></div></figure>


<p>另外，ruby的软件源rubygems.org因为使用的亚马逊的云服务，所以被墙了，需要更新一下ruby的源，如下代码将官方的ruby源替换成国内淘宝的源：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem sources --remove https://rubygems.org/
</span><span class='line'>gem sources -a http://ruby.taobao.org/
</span><span class='line'>gem sources -l</span></code></pre></td></tr></table></div></figure>


<p>还有一点需要注意，pod setup在执行时，会输出Setting up CocoaPods master repo，但是会等待比较久的时间。这步其实是Cocoapods在将它的信息下载到 ~/.cocoapods目录下，如果你等太久，可以试着cd到那个目录，用du -sh *来查看下载进度。你也可以参考本文接下来的使用cocoapods的镜像索引一节的内容来提高下载速度。</p>

<p>使用CocoaPods的镜像索引</p>

<p>所有的项目的Podspec文件都托管在 <a href="https://github.com/CocoaPods/Specs">https://github.com/CocoaPods/Specs</a> 。第一次执行pod setup时，CocoaPods会将这些podspec索引文件更新到本地的 ~/.cocoapods/目录下，这个索引文件比较大，有80M左右。所以第一次更新时非常慢，笔者就更新了将近1个小时才完成。</p>

<p>一个叫akinliu的朋友在gitcafe和oschina上建立了CocoaPods索引库的镜像，因为gitcafe和oschina都是国内的服务器，所以在执行索引更新操作时，会快很多。如下操作可以将CocoaPods设置成使用gitcafe镜像：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>pod repo remove master
</span><span class='line'>pod repo add master https://gitcafe.com/akuandev/Specs.git
</span><span class='line'>pod repo update</span></code></pre></td></tr></table></div></figure>


<p>将以上代码中的 <a href="https://gitcafe.com/akuandev/Specs.git">https://gitcafe.com/akuandev/Specs.git</a> 替换成 <a href="http://git.oschina.net/akuandev/Specs.git">http://git.oschina.net/akuandev/Specs.git</a> 即可使用oschina上的镜像。</p>

<p>使用CocoaPods</p>

<p>使用时需要新建一个名为Podfile的文件，以如下格式，将依赖的库名字依次列在文件中即可</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>platform :ios
</span><span class='line'>pod 'JSONKit',       '~&gt; 1.4'
</span><span class='line'>pod 'Reachability',  '~&gt; 3.0.0'
</span><span class='line'>pod 'ASIHTTPRequest'
</span><span class='line'>pod 'RegexKitLite'</span></code></pre></td></tr></table></div></figure>


<p>然后你将编辑好的Podfile文件放到你的项目根目录中，执行如下命令即可：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd "your project home"
</span><span class='line'>pod install</span></code></pre></td></tr></table></div></figure>


<p>现在，你的所有第三方库都已经下载完成并且设置好了编译参数和依赖，你只需要记住如下2点即可：</p>

<p>使用CocoaPods生成的 .xcworkspace 文件来打开工程，而不是以前的 .xcodeproj 文件。
每次更改了Podfile文件，你需要重新执行一次pod update命令。
查找第三方库</p>

<p>你如果不知道cocoaPods管理的库中，是否有你想要的库，那么你可以通过pod search命令进行查找，以下是我用pod search json查找到的所有可用的库：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ pod search json
</span><span class='line'>
</span><span class='line'>-&gt; AnyJSON (0.0.1)
</span><span class='line'>   Encode / Decode JSON by any means possible.
</span><span class='line'>   - Homepage: https://github.com/mattt/AnyJSON
</span><span class='line'>   - Source:   https://github.com/mattt/AnyJSON.git
</span><span class='line'>   - Versions: 0.0.1 [master repo]
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>-&gt; JSONKit (1.5pre)
</span><span class='line'>   A Very High Performance Objective-C JSON Library.
</span><span class='line'>   - Homepage: https://github.com/johnezang/JSONKit
</span><span class='line'>   - Source:   git://github.com/johnezang/JSONKit.git
</span><span class='line'>   - Versions: 1.5pre, 1.4 [master repo]
</span><span class='line'>
</span><span class='line'>// ...以下省略若干行</span></code></pre></td></tr></table></div></figure>


<p>关于.gitignore</p>

<p>当你执行pod install之后，除了Podfile外，CocoaPods还会生成一个名为Podfile.lock的文件，你不应该把这个文件加入到.gitignore中。因为Podfile.lock会锁定当前各依赖库的版本，之后如果多次执行pod install 不会更改版本，要pod update才会改Podfile.lock了。这样多人协作的时候，可以防止第三方库升级时造成大家各自的第三方库版本不一致。</p>

<p>CocoaPods的这篇官方文档也在What is a Podfile.lock一节中介绍了Podfile.lock的作用，并且指出：</p>

<p>This file should always be kept under version control.</p>

<p>为自己的项目创建podspec文件</p>

<p>我们可以为自己的开源项目创建podspec文件，首先通过如下命令初始化一个podspec文件：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>pod spec create your_pod_spec_name</span></code></pre></td></tr></table></div></figure>


<p>该命令执行之后，CocoaPods会生成一个名为your_pod_spec_name.podspec的文件，然后我们修改其中的相关内容即可。</p>

<p>使用私有的pods</p>

<p>我们可以直接指定某一个依赖的podspec，这样就可以使用公司内部的私有库。该方案有利于使企业内部的公共项目支持CocoaPods。如下是一个示例：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>pod 'MyCommon', :podspec =&gt; 'https://heyandev.github.com/common/myCommon.podspec'</span></code></pre></td></tr></table></div></figure>


<p>不更新podspec</p>

<p>CocoaPods在执行pod install和pod update时，会默认先更新一次podspec索引。使用&ndash;no-repo-update参数可以禁止其做索引更新操作。如下所示：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>pod install --no-repo-update
</span><span class='line'>pod update --no-repo-update</span></code></pre></td></tr></table></div></figure>


<p>生成第三方库的帮助文档</p>

<p>如果你想让CococaPods帮你生成第三方库的帮助文档，并集成到Xcode中，那么用brew安装appledoc即可：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>brew install appledoc</span></code></pre></td></tr></table></div></figure>


<p>关于appledoc，它最大的优点是可以将帮助文档集成到Xcode中，这样你在敲代码的时候，按住opt键单击类名或方法名，就可以显示出相应的帮助文档。</p>

<p>原理</p>

<p>大概研究了一下CocoaPods的原理，它是将所有的依赖库都放到另一个名为Pods项目中，然后让主项目依赖Pods项目，这样，源码管理工作都从主项目移到了Pods项目中。发现的一些技术细节有：</p>

<p>Pods项目最终会编译成一个名为libPods.a的文件，主项目只需要依赖这个.a文件即可。
对于资源文件，CocoaPods提供了一个名为Pods-resources.sh的bash脚本，该脚本在每次项目编译的时候都会执行，将第三方库的各种资源文件复制到目标目录中。
CocoaPods通过一个名为Pods.xcconfig的文件来在编译时设置所有的依赖和参数。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在Github上搭建Octopress博客]]></title>
    <link href="http://heyandev.github.io/blog/2015/01/29/zai-githubshang-da-jian-octopressbo-ke/"/>
    <updated>2015-01-29T13:21:50+08:00</updated>
    <id>http://heyandev.github.io/blog/2015/01/29/zai-githubshang-da-jian-octopressbo-ke</id>
    <content type="html"><![CDATA[<p>安装Octopress博客前需在本机上安装Ruby运行环境和Devkit，另外还要下载Octopress，更改gem的更新源，安装依赖项。本文将针对Github上的Octopress博客搭建进行详细说明。</p>

<!--more-->


<p>一、搭建本地环境</p>

<p>为了在Github上使用Octopress，需要首先配置一下本地环境：</p>

<p>首先安装Git，下载<a href="https://code.google.com/p/msysgit/downloads/list">msysgit</a>，目前最新版本是 <a href="http://msysgit.googlecode.com/files/Git-1.7.10-preview20120409.exe">Git-1.7.10-preview20120409.exe</a> ，安装可参考<a href="https://help.github.com/articles/set-up-git/">官方文档</a>。</p>

<p>然后安装Ruby， <a href="http://octopress.org/docs/setup/">Octopress 官方文档</a>中指定的 Ruby 版本是 1.9.2，所以我们选择 Ruby 1.9.2-p290，下载 <a href="http://rubyforge.org/frs/download.php/75127/rubyinstaller-1.9.2-p290.exe">rubyinstaller-1.9.2-p290.exe</a>，双击安装，安装时记得选中“Add Ruby executables to your PATH”。</p>

<p>为了检查ruby是否已加入到PATH中，可在 Windows 的cmd窗口中执行以下命令：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ruby –version</span></code></pre></td></tr></table></div></figure>


<p>接着安装Devkit，选择下载 4.5.2 版本:<a href="https://github.com/downloads/oneclick/rubyinstaller/DevKit-tdm-32-4.5.2-20111229-1559-sfx.exe">DevKit-tdm-32-4.5.2-20111229-1559-sfx.exe</a>，下载完成后，将其解压到如 E:\DevKit，然后在win的cmd窗口中执行如下命令进行安装：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>E:
</span><span class='line'>cd DevKit
</span><span class='line'>ruby dk.rb init
</span><span class='line'>ruby dk.rb install</span></code></pre></td></tr></table></div></figure>


<p>最后安装python，主要是博客代码加亮模块需要python环境的支持，<a href="http://www.activestate.com/activepython/downloads">下载2.7版</a>，安装完以后，在Windows的cmd窗口中执行：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>easy_install pygments</span></code></pre></td></tr></table></div></figure>


<p>本地环境配置结束。</p>

<p>二、更新本地环境配置
为了支持中文UTF-8编码，对Windows环境变量配置如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>LANG=zh_CN.UTF-8
</span><span class='line'>LC_ALL=zh_CN.UTF-8</span></code></pre></td></tr></table></div></figure>


<p>也可在直接在Windows的cmd窗口下运行命令</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>set LANG=zh_CN.UTF-8
</span><span class='line'>set LC_ALL=zh_CN.UTF-8</span></code></pre></td></tr></table></div></figure>


<p>更新gem的更新源，ruby的官方更新源经常被河蟹，换成国内的更新源，这样速度就快多了，变更如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem sources -a http://ruby.taobao.org/
</span><span class='line'>gem sources -r http://rubygems.org/
</span><span class='line'>gem sources -l</span></code></pre></td></tr></table></div></figure>


<p>最后一个命令可查看更该后的更新源列表。</p>

<p>三、下载并配置Octopress
首先下载Octopress源码，可以使用下面git命令下载，也可直接在Octopress Github库中下载octopress的zip包<a href="https://nodeload.github.com/imathis/octopress/zipball/master">（点击下载）</a>，然后将下载的压缩包解压到E盘根目录，修改解压后的文件夹名称为 octopress。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>E:
</span><span class='line'>git clone git://github.com/imathis/octopress.git  octopress</span></code></pre></td></tr></table></div></figure>


<p>然后更新 Octopress 的gem更新源：进到 E:octopress 目录，用文本编辑器（例如记事本）打开文件Gemfile，将里面source &ldquo;<a href="http://rubygems.org/">http://rubygems.org/</a>&#8220;改为source &#8221;<a href="http://ruby.taobao.org/">http://ruby.taobao.org/</a>&#8220;。</p>

<p>最后安装Octopress的依赖项，在Windows的CMD窗口输入以下命令：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>E:
</span><span class='line'>cd octopress
</span><span class='line'>gem install bundler
</span><span class='line'>bundle install</span></code></pre></td></tr></table></div></figure>


<p>四、新建Github Repositories
登录<a href="http://github.com">Github</a>，假设你的用户名是username，首先要新建一个命名为 username.github.com 的Repo，命名必须是这个格式，如果不这样命名的话，在运行命令 rake setup_github_pages  之后不能够自动创建后面提到的master和source 分支，而是作为普通仓库生成 gh-pages 分支。</p>

<p>五、发布Octopress到Github
1、打开Windows下的命令窗口，进入到Octopress所在的目录，输入命令：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake setup_github_pages</span></code></pre></td></tr></table></div></figure>


<p>按照提示输入刚才新建的Repo地址，类似：git@github.com:username/username.github.com或git@github.com:username/username.github.com.git。</p>

<p>2、接着输入命令：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake install
</span><span class='line'>rake generate
</span><span class='line'>rake preview</span></code></pre></td></tr></table></div></figure>


<p>其中rake install是安装Octopress默认主题的，rake gnerate是生成静态页面的，这两个命令是必须运行的，而rake preview则是用来本地浏览的（运行时看屏幕上提示，按Ctrl+C并输入Y来终止批处理操作），运行后打开浏览器，输入 <a href="http://localhost:4000/">http://localhost:4000/</a> 就可以看到界面了，不想预览的话也可以不运行，直接进入下一步。</p>

<p>3、将博客发布到Github上，输入下面命令：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake deploy</span></code></pre></td></tr></table></div></figure>


<p>这样，生成的内容将会自动发布到master分支，并且可以使用 <a href="http://username.github.com">http://username.github.com</a> 访问内容。</p>

<p>4、别忘了把所有源文件发布到 source 分支下面：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git add .
</span><span class='line'>git commit -m “your message”
</span><span class='line'>git push origin source</span></code></pre></td></tr></table></div></figure>


<p>至此，所有发布完成，接下来就是对博客的设置了。</p>

<p>六、Ocotpress博客配置
更改下面的配置后，还需要运行 rake generate、rake deploy等等命令的。</p>

<p>1、默认的博客运行成功的话，就需要按照自己的要求对博客配置进行修改了，主要是修改Octopress根目录下的主配置文件_config.yml。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>url:  http://username.github.com                 # 博客地址
</span><span class='line'>title:  蔓草札记                                            # 博客标题
</span><span class='line'>subtitle:  感受生活，感悟工作，感触心灵           # 副标题
</span><span class='line'>author:  xhhjin                                                       # 作者
</span><span class='line'>simple_search:  http://www.google.com.hk/search     # 搜索引擎
</span><span class='line'>description:                                                            # 关于博客的描述
</span><span class='line'>subscribe_rss:  /atom.xml                  # Rss订阅地址, 默认是  /atom.xml
</span><span class='line'>subscribe_email:                               # 提供Email订阅的地址
</span><span class='line'>email:                                              # Rss订阅的Email地址
</span><span class='line'>root:  /               # 博客路径，默认是“/“，如果你打算在子目录中，记得修改这个路径
</span><span class='line'>permalink: /blog/:year/:month/:day/:title/           # 文章的固定链接形式</span></code></pre></td></tr></table></div></figure>


<p>2、更换主题</p>

<p>主题位于 octopress/.theme 目录下，默认主题为 classic。 如果需要更改主题（可在网上查找），下载后将主题也放在.theme目录下即可，如果主题名字为blog_theme，那么安装主题时输入以下命令即可：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake install [‘blog_theme’]</span></code></pre></td></tr></table></div></figure>


<p>七、绑定域名
Github Pages绑定域名的方法有点特殊，需要在Octopress/source目录下建个无后缀的CNAME文本文件，文件内容就是你的域名，例如github.xuhehuan.com，然后修改A纪录到207.97.227.245 ，或者 CNAME 指向 username.github.com，下面就等着解析生效了</p>
]]></content>
  </entry>
  
</feed>
